# -*- coding: utf-8 -*-
"""Web App.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/10pQIU50UjqvCojkD4I6TsQtL7vepY_jR
"""

!pip install --upgrade gradio
!pip install catboost scikit-learn pandas joblib
!pip install -q gradio huggingface_hub
!huggingface-cli login

from catboost import CatBoostClassifier
import gradio as gr
import pandas as pd
import joblib
import os
from google.colab import drive

# Mount Google Drive
drive.mount('/content/drive')

# Load pre-trained model and mlb
model_path = '/content/drive/MyDrive/AI4ALL 2025 Group 13B/model_0722.pkl'
mlb_path = '/content/drive/MyDrive/AI4ALL 2025 Group 13B/mlb_0722.pkl'

model = joblib.load(model_path)
mlb = joblib.load(mlb_path)

import pandas as pd

# Load dataset
neg = 'https://media.githubusercontent.com/media/TIML-Group/HODDI/refs/heads/main/dataset/HODDI/Merged_Dataset/neg.csv'
pos = 'https://media.githubusercontent.com/media/TIML-Group/HODDI/refs/heads/main/dataset/HODDI/Merged_Dataset/pos.csv'

dfn = pd.read_csv(neg)
dfp = pd.read_csv(pos)
dfn.replace({'hyperedge_label': {-1: 0}}, inplace=True)
df_combined = pd.concat([dfp, dfn]).sample(frac=1, random_state=42)

# Load dictionary
dictionary = 'https://media.githubusercontent.com/media/TIML-Group/HODDI/refs/heads/main/dataset/dictionary/Drugbank_ID_SMILE_all_structure%20links.csv'
df_dict = pd.read_csv(dictionary)
df_dict = df_dict.rename(columns={'DrugBank ID': 'DrugBankID'})

import ast
# --- The crucial conversion function ---
def convert_string_to_list(s):
    if isinstance(s, str):
        evaluated = ast.literal_eval(s)
        if isinstance(evaluated, list):
            return evaluated # It successfully parsed into a list!
        else:
            # If it's a string like 'DB001' (not a list string), wrap it
            return [str(evaluated)]
    elif isinstance(s, list):
        return s # Already a list, no conversion needed

# Apply the conversion
df_combined['DrugBankID'] = df_combined['DrugBankID'].apply(convert_string_to_list)

# Drop unknown IDs
unknown_ids = ['DB03862', 'DB04482', 'DB04920', 'DB11050', 'DB12366', 'DB13151', 'DB14693', 'DB15270', 'DB18046']

def has_unknown(drug_ids):
    return any(d in unknown_ids for d in drug_ids)

df_combined = df_combined[~df_combined['DrugBankID'].apply(has_unknown)].reset_index(drop=True)

# Create name-to-ID mapping
name_to_id = dict(zip(df_dict['Name'], df_dict['DrugBankID']))
id_to_name = dict(zip(df_dict['DrugBankID'], df_dict['Name']))

def name_to_id_mapping(drug_names):
    """Convert drug names to DrugBank IDs with error handling"""
    drug_ids = []
    missing_drugs = []

    for name in drug_names:
        # Remove extra whitespace and standardize case
        clean_name = name.strip().lower()

        # Find matching drug (case insensitive)
        match = None
        for dict_name, drug_id in name_to_id.items():
            if clean_name == dict_name.strip().lower():
                match = drug_id
                break

        if match:
            drug_ids.append(match)
        else:
            missing_drugs.append(name)

    return drug_ids, missing_drugs

def extract_valid_drugs(interaction_df, drug_dict_df):
    """
    Extract DrugBank IDs and names that exist in both datasets
    """
    # Extract all unique DrugBank IDs from interaction dataset
    all_interaction_ids = set()
    for drug_list in interaction_df['DrugBankID']:
        all_interaction_ids.update(drug_list)

    # Filter drug dictionary to only include IDs present in interactions
    valid_drugs = drug_dict_df[drug_dict_df['DrugBankID'].isin(all_interaction_ids)]

    # Create mappings
    id_to_name = dict(zip(valid_drugs['DrugBankID'], valid_drugs['Name']))
    name_to_id = dict(zip(valid_drugs['Name'], valid_drugs['DrugBankID']))
    drug_name_list = valid_drugs['Name'].unique().tolist()

    return id_to_name, name_to_id, drug_name_list

# Get mappings and drug list
id_to_name, name_to_id, drug_list = extract_valid_drugs(df_combined, df_dict)

def prepare_model_input(drug_names):
    """Convert drug names to model-ready features"""
    try:
        drug_ids = [name_to_id[name] for name in drug_names]
        encoded = mlb.transform([drug_ids]).astype(float)
        return encoded
    except KeyError as e:
        print(f"Drug not found: {e}")
        return None
    except Exception as e:
        print(f"Input error: {e}")
        return None

def predict_combination(drugs):
    """Make prediction with selected drugs"""
    try:
        if len(drugs) < 2:
            return "Please select at least 2 drugs", "0%"

        # Prepare model input with DrugBank IDs
        input_data = prepare_model_input(drugs)
        if input_data is None:
            return "Error preparing input", "0%"

        # Get prediction
        prediction = model.predict(input_data)[0]
        proba = model.predict_proba(input_data)[0]
        confidence = max(proba) * 100

        result = "Risky" if prediction == 1 else "Safe"
        return result, f"{confidence:.0f}%"

    except Exception as e:
        print(f"Prediction error: {e}")
        return "Prediction error", "0%"

with gr.Blocks() as app:
    gr.Markdown("""
    <div style="text-align: center;">
        <h1>Drug Combination Predictor ðŸ’Š</h1>
        <p>
            Welcome to the Drug Combination Predictor! ðŸ¤— <br>
            Adverse drug interactions (ADIs) are a leading cause of preventable harm in healthcare. <br>
            According to the FDA, in 2022, there were over 1.25 million serious adverse events reported and nearly 175,000 deaths. <br>
            Manually identifying unsafe drug combinations is impractical due to the vast number of possible interactions and hidden risk patterns. <br>
            To address this problem, we leverage machine learning to accurately predict unsafe drug combinations.
        </p>
        <h3>How does it work? ðŸ¤¨</h3>
        <p>
            Simply select at least two drug names from the list. Then, click on <strong>Predict</strong> to quickly analyze the chosen combination. <br>
            The model will give you a prediction about the combination safety, along with a "confidence score" so you know how certain it is with its prediction.
        </p>
        <p>
            ðŸ”— <a href="https://github.com/scorpsj77/drug_interaction_prediction" target="_blank">View our project on GitHub</a>
        </p>
    </div>
    """)

    with gr.Row():
        drug_select = gr.Dropdown(
            choices=drug_list,
            label="Drug Names",
            multiselect=True,
            interactive=True
        )

    with gr.Row():
        selected_display = gr.Textbox(label="Selected Drugs", interactive=False)
        output = gr.Textbox(label="Prediction Result")
        confidence = gr.Textbox(label="Confidence Score")

    # State management
    selected_drugs = gr.State([])

    def update_selection(drugs):
        return ", ".join(drugs) if drugs else "", drugs

    drug_select.change(
        fn=update_selection,
        inputs=drug_select,
        outputs=[selected_display, selected_drugs]
    )

    submit_btn = gr.Button("Predict", variant="primary")
    submit_btn.click(
        fn=predict_combination,
        inputs=selected_drugs,
        outputs=[output, confidence]
    )

    clear_btn = gr.Button("Clear Selection")
    clear_btn.click(
        fn=lambda: ("", [], [], "", ""),
        outputs=[selected_display, selected_drugs, drug_select, output, confidence]
    )

    # Contact box at the bottom
    gr.Markdown("""
    <div style="margin-top: 30px; text-align: center; border-top: 1px solid #ccc; padding-top: 20px;">
        <p>ðŸ“§ This project is developed by:
        Jiyuan Ji (<a href="mailto:cji28@amherst.edu">cji28@amherst.edu</a>)
        Emily Hsu (<a href="mailto:eh119@wellesley.edu">eh119@wellesley.edu</a>)
        Anusri Nagarajan (<a href="mailto:anusri.nagarajan@sjsu.edu">anusri.nagarajan@sjsu.edu</a>)
        Ahmed Mohammed (<a href="mailto:ahmed.mohammed@bison.howard.edu">ahmed.mohammed@bison.howard.edu</a>)
        </p>
    </div>
    """)

app.launch(share=True)